// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package context represents the imported interface "golem:api/context@1.1.6".
//
// Invocation context support
package context

import (
	wallclock "github.com/golemcloud/golem-go/binding/wasi/clocks/wall-clock"
	"go.bytecodealliance.org/cm"
)

// DateTime represents the type alias "golem:api/context@1.1.6#datetime".
//
// See [wallclock.DateTime] for more information.
type DateTime = wallclock.DateTime

// Span represents the imported resource "golem:api/context@1.1.6#span".
//
// Represents a unit of work or operation
//
//	resource span
type Span cm.Resource

// ResourceDrop represents the imported resource-drop for resource "span".
//
// Drops a resource handle.
//
//go:nosplit
func (self Span) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_SpanResourceDrop((uint32)(self0))
	return
}

// Finish represents the imported method "finish".
//
// Early finishes the span; otherwise it will be finished when the resource is dropped
//
//	finish: func()
//
//go:nosplit
func (self Span) Finish() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_SpanFinish((uint32)(self0))
	return
}

// SetAttribute represents the imported method "set-attribute".
//
// Set an attribute on the span
//
//	set-attribute: func(name: string, value: attribute-value)
//
//go:nosplit
func (self Span) SetAttribute(name string, value AttributeValue) {
	self0 := cm.Reinterpret[uint32](self)
	name0, name1 := cm.LowerString(name)
	value0, value1, value2 := lower_AttributeValue(value)
	wasmimport_SpanSetAttribute((uint32)(self0), (*uint8)(name0), (uint32)(name1), (uint32)(value0), (*uint8)(value1), (uint32)(value2))
	return
}

// SetAttributes represents the imported method "set-attributes".
//
// Set multiple attributes on the span
//
//	set-attributes: func(attributes: list<attribute>)
//
//go:nosplit
func (self Span) SetAttributes(attributes cm.List[Attribute]) {
	self0 := cm.Reinterpret[uint32](self)
	attributes0, attributes1 := cm.LowerList(attributes)
	wasmimport_SpanSetAttributes((uint32)(self0), (*Attribute)(attributes0), (uint32)(attributes1))
	return
}

// StartedAt represents the imported method "started-at".
//
// Gets the starting time of the span
//
//	started-at: func() -> datetime
//
//go:nosplit
func (self Span) StartedAt() (result DateTime) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_SpanStartedAt((uint32)(self0), &result)
	return
}

// InvocationContext represents the imported resource "golem:api/context@1.1.6#invocation-context".
//
// Represents an invocation context wich allows querying the stack of attributes
// created by automatic and user-defined spans.
//
//	resource invocation-context
type InvocationContext cm.Resource

// ResourceDrop represents the imported resource-drop for resource "invocation-context".
//
// Drops a resource handle.
//
//go:nosplit
func (self InvocationContext) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvocationContextResourceDrop((uint32)(self0))
	return
}

// GetAttribute represents the imported method "get-attribute".
//
// Gets the value of an attribute `key`. If `inherited` is true, the value is searched
// in the stack of spans,
// otherwise only in the current span.
//
//	get-attribute: func(key: string, inherited: bool) -> option<attribute-value>
//
//go:nosplit
func (self InvocationContext) GetAttribute(key string, inherited bool) (result cm.Option[AttributeValue]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	inherited0 := (uint32)(cm.BoolToU32(inherited))
	wasmimport_InvocationContextGetAttribute((uint32)(self0), (*uint8)(key0), (uint32)(key1), (uint32)(inherited0), &result)
	return
}

// GetAttributeChain represents the imported method "get-attribute-chain".
//
// Gets the chain of attribute values associated with the given `key`. If the key
// does not exist in any of the
// spans in the invocation context, the list is empty. The chain's first element contains
// the most recent (innermost) value.
//
//	get-attribute-chain: func(key: string) -> list<attribute-value>
//
//go:nosplit
func (self InvocationContext) GetAttributeChain(key string) (result cm.List[AttributeValue]) {
	self0 := cm.Reinterpret[uint32](self)
	key0, key1 := cm.LowerString(key)
	wasmimport_InvocationContextGetAttributeChain((uint32)(self0), (*uint8)(key0), (uint32)(key1), &result)
	return
}

// GetAttributeChains represents the imported method "get-attribute-chains".
//
// Gets all values of all attributes of the current invocation context.
//
//	get-attribute-chains: func() -> list<attribute-chain>
//
//go:nosplit
func (self InvocationContext) GetAttributeChains() (result cm.List[AttributeChain]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvocationContextGetAttributeChains((uint32)(self0), &result)
	return
}

// GetAttributes represents the imported method "get-attributes".
//
// Gets all attributes of the current invocation context. If `inherited` is true,
// it returns the merged set of attributes, each
// key associated with the latest value found in the stack of spans.
//
//	get-attributes: func(inherited: bool) -> list<attribute>
//
//go:nosplit
func (self InvocationContext) GetAttributes(inherited bool) (result cm.List[Attribute]) {
	self0 := cm.Reinterpret[uint32](self)
	inherited0 := (uint32)(cm.BoolToU32(inherited))
	wasmimport_InvocationContextGetAttributes((uint32)(self0), (uint32)(inherited0), &result)
	return
}

// Parent represents the imported method "parent".
//
// Gets the parent context, if any; allows recursive processing of the invocation
// context.
//
// Alternatively, the attribute query methods can return inherited values without
// having to
// traverse the stack manually.
//
//	parent: func() -> option<invocation-context>
//
//go:nosplit
func (self InvocationContext) Parent() (result cm.Option[InvocationContext]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvocationContextParent((uint32)(self0), &result)
	return
}

// SpanID represents the imported method "span-id".
//
// Gets the current span id
//
//	span-id: func() -> span-id
//
//go:nosplit
func (self InvocationContext) SpanID() (result SpanID) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvocationContextSpanID((uint32)(self0), &result)
	return
}

// TraceContextHeaders represents the imported method "trace-context-headers".
//
// Gets the W3C Trace Context headers associated with the current invocation context
//
//	trace-context-headers: func() -> list<tuple<string, string>>
//
//go:nosplit
func (self InvocationContext) TraceContextHeaders() (result cm.List[[2]string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvocationContextTraceContextHeaders((uint32)(self0), &result)
	return
}

// TraceID represents the imported method "trace-id".
//
// Gets the current trace id
//
//	trace-id: func() -> trace-id
//
//go:nosplit
func (self InvocationContext) TraceID() (result TraceID) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_InvocationContextTraceID((uint32)(self0), &result)
	return
}

// AttributeValue represents the variant "golem:api/context@1.1.6#attribute-value".
//
// Possible span attribute value types
//
//	variant attribute-value {
//		%string(string),
//	}
type AttributeValue cm.Variant[uint8, string, string]

// AttributeValueString_ returns a [AttributeValue] of case "string".
//
// A string value
func AttributeValueString_(data string) AttributeValue {
	return cm.New[AttributeValue](0, data)
}

// String_ returns a non-nil *[string] if [AttributeValue] represents the variant case "string".
func (self *AttributeValue) String_() *string {
	return cm.Case[string](self, 0)
}

var _AttributeValueStrings = [1]string{
	"string",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v AttributeValue) String() string {
	return _AttributeValueStrings[v.Tag()]
}

// Attribute represents the record "golem:api/context@1.1.6#attribute".
//
// An attribute of a span
//
//	record attribute {
//		key: string,
//		value: attribute-value,
//	}
type Attribute struct {
	_     cm.HostLayout  `json:"-"`
	Key   string         `json:"key"`
	Value AttributeValue `json:"value"`
}

// AttributeChain represents the record "golem:api/context@1.1.6#attribute-chain".
//
// A chain of attribute values, the first element representing the most recent value
//
//	record attribute-chain {
//		key: string,
//		values: list<attribute-value>,
//	}
type AttributeChain struct {
	_      cm.HostLayout           `json:"-"`
	Key    string                  `json:"key"`
	Values cm.List[AttributeValue] `json:"values"`
}

// TraceID represents the string "golem:api/context@1.1.6#trace-id".
//
// The trace represented by a 16 bytes hexadecimal string
//
//	type trace-id = string
type TraceID string

// SpanID represents the string "golem:api/context@1.1.6#span-id".
//
// The span represented by a 8 bytes hexadecimal string
//
//	type span-id = string
type SpanID string

// StartSpan represents the imported function "start-span".
//
// Starts a new `span` with the given name, as a child of the current invocation context
//
//	start-span: func(name: string) -> span
//
//go:nosplit
func StartSpan(name string) (result Span) {
	name0, name1 := cm.LowerString(name)
	result0 := wasmimport_StartSpan((*uint8)(name0), (uint32)(name1))
	result = cm.Reinterpret[Span]((uint32)(result0))
	return
}

// CurrentContext represents the imported function "current-context".
//
// # Gets the current invocation context
//
// The function call captures the current context; if new spans are started, the returned
// `invocation-context` instance will not
// reflect that.
//
//	current-context: func() -> invocation-context
//
//go:nosplit
func CurrentContext() (result InvocationContext) {
	result0 := wasmimport_CurrentContext()
	result = cm.Reinterpret[InvocationContext]((uint32)(result0))
	return
}

// AllowForwardingTraceContextHeaders represents the imported function "allow-forwarding-trace-context-headers".
//
// # Allows or disallows forwarding of trace context headers in outgoing HTTP requests
//
// Returns the previous value of the setting
//
//	allow-forwarding-trace-context-headers: func(allow: bool) -> bool
//
//go:nosplit
func AllowForwardingTraceContextHeaders(allow bool) (result bool) {
	allow0 := (uint32)(cm.BoolToU32(allow))
	result0 := wasmimport_AllowForwardingTraceContextHeaders((uint32)(allow0))
	result = (bool)(cm.U32ToBool((uint32)(result0)))
	return
}
