// Code generated by wit-bindgen-go. DO NOT EDIT.

package host

import (
	"github.com/golemcloud/golem-go/binding/golem/rpc/types"
	"go.bytecodealliance.org/cm"
	"unsafe"
)

// WorkerEnvFilterShape is used for storage in variant or result types.
type WorkerEnvFilterShape struct {
	_     cm.HostLayout
	shape [unsafe.Sizeof(WorkerEnvFilter{})]byte
}

func lower_UUID(v types.UUID) (f0 uint64, f1 uint64) {
	f0 = (uint64)(v.HighBits)
	f1 = (uint64)(v.LowBits)
	return
}

func lower_ComponentID(v types.ComponentID) (f0 uint64, f1 uint64) {
	f0, f1 = lower_UUID(v.UUID)
	return
}

func lower_WorkerAnyFilter(v WorkerAnyFilter) (f0 *WorkerAllFilter, f1 uint32) {
	f0, f1 = cm.LowerList(v.Filters)
	return
}

func lower_OptionWorkerAnyFilter(v cm.Option[WorkerAnyFilter]) (f0 uint32, f1 *WorkerAllFilter, f2 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2 := lower_WorkerAnyFilter(*some)
		f1 = (*WorkerAllFilter)(v1)
		f2 = (uint32)(v2)
	}
	return
}

func lower_WorkerID(v types.WorkerID) (f0 uint64, f1 uint64, f2 *uint8, f3 uint32) {
	f0, f1 = lower_ComponentID(v.ComponentID)
	f2, f3 = cm.LowerString(v.WorkerName)
	return
}

func lower_PromiseID(v PromiseID) (f0 uint64, f1 uint64, f2 *uint8, f3 uint32, f4 uint64) {
	f0, f1, f2, f3 = lower_WorkerID(v.WorkerID)
	f4 = (uint64)(v.OplogIdx)
	return
}

func lower_OptionF64(v cm.Option[float64]) (f0 uint32, f1 float64) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1 := (float64)(*some)
		f1 = (float64)(v1)
	}
	return
}

func lower_RetryPolicy(v RetryPolicy) (f0 uint32, f1 uint64, f2 uint64, f3 float64, f4 uint32, f5 float64) {
	f0 = (uint32)(v.MaxAttempts)
	f1 = (uint64)(v.MinDelay)
	f2 = (uint64)(v.MaxDelay)
	f3 = (float64)(v.Multiplier)
	f4, f5 = lower_OptionF64(v.MaxJitterFactor)
	return
}

func lower_RevertWorkerTarget(v RevertWorkerTarget) (f0 uint32, f1 uint64) {
	f0 = (uint32)(v.Tag())
	switch f0 {
	case 0: // revert-to-oplog-index
		v1 := (uint64)(*cm.Case[OplogIndex](&v, 0))
		f1 = (uint64)(v1)
	case 1: // revert-last-invocations
		v1 := (uint64)(*cm.Case[uint64](&v, 1))
		f1 = (uint64)(v1)
	}
	return
}
